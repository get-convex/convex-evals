Create a backend that demonstrates denormalization for indexing.

Given this existing schema:
```ts
export default defineSchema({
  // Main owners table
  owners: defineTable({
    name: v.string(),
    age: v.number(),
  }),

  // Dogs table with denormalized owner name for efficient lookups
  dogs: defineTable({
    name: v.string(),
    breed: v.string(),
    ownerId: v.id("owners"),
  }),
});
```

1. Generate a "convex/schema.ts" schema that allows sorting and paginating over the dogs table by the owner's age or the owner's ID (index `by_owner`).

2. Create these functions in `convex/index.ts`:

a. Create a mutation `createDog` that:
   - Takes arguments: `{ dogName: string, breed: string, ownerId: Id<"owners"> }`
   - Creates a new dog record
   - Returns the new dog's ID
   - Throws if owner not found

b. Create a mutation `updateOwnerAge` that:
   - Takes arguments: `{ ownerId: Id<"owners">, newAge: number }`
   - Updates the owner's age in the owners table and any associated dog records.
   - Returns null
   - Throws if owner not found

c. Create a query `getDogsByOwnerAge` that:
   - Takes arguments: `{ age: number }`
   - Returns an array of dog records { name, breed } that have an owner with the given age

The goal is to demonstrate how denormalization can be used to create efficient lookups on fields from related tables, while maintaining data consistency through update functions.
