Create a backend that demonstrates three different types of schema migrations in Convex.

Given this previous schema definition:
```ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  products: defineTable({
    name: v.string(),
    category: v.string(),
    active: v.boolean(),
  }),
});
```

Define a new schema in `convex/schema.ts` that is backwards-compatible with the previous schema.

Make three changes to the schema to demonstrate different types of backwards-compatible schema changes:

1. Add a new `description` field
   - This demonstrates how to safely add a new column.
   - In a real application, you would later set the column value, before making it required

2. Deprecate the `category` field
   - Enable removing the `category` field
   - This is the first step in safely removing a column
   - In a real application, you would later clear the column values, then remove the column

3. Change the `active` field from a boolean to an enum-type list of string literals "active", "inactive", "banned"
   - This demonstrates how to safely transition from a boolean to a list of possible values.

Additionally, create a helper function `migrateProductHelper(product: Doc<"products">): {
   _id: Id<"products">,
   _creationTime: number,
   name: string,
   description: string,
   category: undefined,
   active: "active" | "inactive" | "banned"
}` in `convex/index.ts` that:

1. Sets a default value for the `description` field to "No description"
2. Clears the `category` field
3. Changes the `active` field from a boolean to either "active" or "inactive"

Use this helper function in two API functions:

1. A public mutation `migrateProduct` that takes a productId and patches the product to match the new schema and has no return value
2. A public query `getProduct` that takes a productId and returns the product with the new schema that doesn't include deprecated fields.

Both should use the helper function to migrate the product.

All schema changes must maintain backwards compatibility, allowing existing code to continue working during the migration process.
