Create a backend that safely deletes a user and all associated data across multiple tables.

Create this schema in `convex/schema.ts`:
```ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  users: defineTable({
    name: v.string(),
    email: v.string(),
  }).index("by_email", ["email"]),

  posts: defineTable({
    authorId: v.id("users"),
    title: v.string(),
    content: v.string(),
  }).index("by_author", ["authorId"]),

  comments: defineTable({
    authorId: v.id("users"),
    postId: v.id("posts"),
    content: v.string(),
  })
    .index("by_author", ["authorId"])
    .index("by_post", ["postId"]),

  likes: defineTable({
    userId: v.id("users"),
    postId: v.id("posts"),
  })
    .index("by_user", ["userId"])
    .index("by_post", ["postId"]),
});
```

Implement the following functions in `convex/index.ts`:

2. Create a mutation `deleteUser` that takes `{ userId: Id<"users"> }` and deletes all dependent records.
   Both records that directly depend on the user, records that depend on those records, etc.
   Return nothing.

The implementation should demonstrate:
- Efficient parallel operations where possible
- Proper error handling
- Transaction safety

Create only the `convex/schema.ts`, `convex/index.ts`, and `package.json` files. Do not generate any other files.

Do not export any functions from `convex/index.ts` other than `deleteUser`.
