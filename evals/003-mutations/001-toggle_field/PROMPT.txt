# Toggle Field Mutation with Error Handling

Write a mutation that toggles a boolean field in a task management system. This will test your understanding of:
1. Reading existing documents
2. Updating single fields
3. Error handling
4. Optimistic updates

## Schema

Create a schema with a "tasks" table that has these fields:
- `title`: string (required) - The task title
- `completed`: boolean (required) - Whether the task is done
- `updatedAt`: number (required) - Unix timestamp in milliseconds of last update
- `completedAt`: number (optional) - Unix timestamp when task was completed (null if not completed)

## Required Functions

Write a mutation called `toggleTask` that:

1. Takes these arguments:
   - `taskId`: Id<"tasks"> - The ID of the task to toggle

2. Behavior:
   - Reads the existing task document
   - Flips the `completed` boolean
   - Updates `updatedAt` to current timestamp
   - If task becomes completed, sets `completedAt` to current timestamp
   - If task becomes uncompleted, removes `completedAt`

3. Returns:
   - The complete updated document including all fields

4. Throws an error if:
   - The task ID doesn't exist
   - The task was deleted
   - Any other database error occurs

## Example Usage

```typescript
// Success case - completing a task
const task = await client.mutation("toggleTask", {
  taskId: existingTaskId
});
// Returns: { 
//   _id: existingTaskId,
//   title: "Original Title",
//   completed: true,
//   updatedAt: 1234567890,
//   completedAt: 1234567890
// }

// Error case - non-existent task
await client.mutation("toggleTask", {
  taskId: "invalid_id"
}); 
// Throws error: "Task not found"
```

## Test Cases

Your implementation should handle these cases:
1. Toggle incomplete task to complete
   - Verify completed=true
   - Verify completedAt is set
   - Verify updatedAt changed
2. Toggle complete task to incomplete
   - Verify completed=false
   - Verify completedAt is removed
   - Verify updatedAt changed
3. Error on non-existent task ID
4. Error on deleted task
5. Concurrent updates (multiple toggles in rapid succession)
   - Each toggle should see the latest state
   - No lost updates