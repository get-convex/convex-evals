# Document Replacement with Version Control

Write a mutation that replaces user profile documents, demonstrating the difference between `replace` and other update methods. This will test your understanding of:
1. Full document replacement
2. Version control
3. Schema validation
4. Handling missing documents

## Schema

Create a schema with a "profiles" table that has these fields:
- `username`: string (required) - Unique username, 3-20 characters
- `displayName`: string (required) - Display name, 1-50 characters
- `bio`: string (required) - User bio, 0-500 characters
- `version`: number (required) - Profile version number, starts at 1
- `lastModified`: number (required) - Unix timestamp of last modification
- `preferences`: object (required) - User preferences with fields:
  - `theme`: string (required) - Either "light" or "dark"
  - `emailNotifications`: boolean (required) - Whether to send email notifications
  - `visibility`: string (required) - Either "public" or "private"

## Required Functions

Write a mutation called `replaceProfile` that:

1. Takes these arguments:
   - `profileId`: Id<"profiles"> - The ID of the profile to replace
   - `profile`: object - The new profile data containing:
     - `username`: string
     - `displayName`: string
     - `bio`: string
     - `preferences`: object with theme, emailNotifications, visibility
   - `expectedVersion`: number - The version number the client expects

2. Behavior:
   - Validates all input fields according to schema rules
   - Verifies the profile exists
   - Checks if the current version matches expectedVersion
   - Replaces the entire document while:
     - Incrementing the version number
     - Updating lastModified timestamp
   - Uses ctx.db.replace() to ensure full document replacement

3. Returns:
   - The complete replaced document including version and lastModified

4. Throws an error if:
   - The profile doesn't exist
   - The version doesn't match (concurrent modification)
   - Any validation fails:
     - Username length/format
     - Display name length
     - Bio length
     - Invalid theme/visibility values

## Example Usage

```typescript
// Success case
const profile = await client.mutation("replaceProfile", {
  profileId: existingId,
  profile: {
    username: "alice_dev",
    displayName: "Alice Developer",
    bio: "Full-stack developer",
    preferences: {
      theme: "dark",
      emailNotifications: true,
      visibility: "public"
    }
  },
  expectedVersion: 1
});
// Returns updated profile with version: 2

// Error case - version mismatch
await client.mutation("replaceProfile", {
  profileId: existingId,
  profile: { /* valid profile data */ },
  expectedVersion: 1  // But actual version is 2
}); 
// Throws error: "Concurrent modification: expected version 1 but found 2"
```

## Test Cases

Your implementation should handle these cases:
1. Successful full replacement
   - Verify all fields are replaced
   - Verify version increments
   - Verify lastModified updates
2. Version mismatch error
3. Invalid field values:
   - Username too short/long
   - Display name too long
   - Bio too long
   - Invalid theme/visibility values
4. Missing document error
5. Concurrent modifications
   - Multiple replacements with correct version handling