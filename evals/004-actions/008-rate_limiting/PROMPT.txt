Create an HTTP action that implements rate limiting for API access.

Required Action:
Create an HTTP action at `/api` that:
1. Implements token bucket rate limiting:
   - Each user gets N tokens per time window
   - Tokens refill at a fixed rate
   - Each request consumes one token
   - Requests are rejected when no tokens are available
2. Tracks rate limits per user/IP:
   - Store current token count
   - Track last refill timestamp
   - Handle concurrent requests safely
3. Returns appropriate responses:
   - Success: Process request normally
   - Rate limited: 429 with retry-after header

Schema Requirements:
- Table: "rate_limits"
  - identifier: string (user ID or IP)
  - tokens: number (current token count)
  - lastRefill: number (timestamp)
  - totalRequests: number
  - limitExceeded: number

- Table: "api_logs"
  - identifier: string
  - endpoint: string
  - timestamp: number
  - success: boolean
  - errorCode: optional string
  - responseTime: number

Configuration:
```typescript
const RATE_LIMIT_CONFIG = {
  maxTokens: 10,        // Maximum tokens per user
  refillRate: 1,        // Tokens per second
  refillInterval: 60,   // Seconds between refills
  minWaitTime: 1000,    // Minimum ms between requests
};
```

Example Usage:
```typescript
// Request with rate limiting
const response = await fetch("/api/data", {
  headers: { "Authorization": "Bearer user123" }
});

// Rate limit exceeded response
{
  "error": "Rate limit exceeded",
  "retryAfter": 30,
  "limit": 10,
  "remaining": 0,
  "reset": 1678901234567
}
```

Test Cases:
1. Basic Rate Limiting
   - Single user within limits
   - Single user exceeding limits
   - Multiple users concurrent access
   - Token refill behavior

2. Token Management
   - Initial token allocation
   - Token consumption
   - Token refill timing
   - Concurrent token updates

3. Error Handling
   - Missing authentication
   - Invalid tokens
   - Database errors
   - Concurrent requests

4. Headers and Responses
   - Rate limit headers
   - Retry-after calculation
   - Error status codes
   - Response format

5. Edge Cases
   - Burst requests
   - Long gaps between requests
   - Token refill edge cases
   - Time synchronization