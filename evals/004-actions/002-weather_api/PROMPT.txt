Create an action that fetches weather data from an external API and stores it in Convex.

Required Action:
Create an action named `fetchWeather` that:
1. Takes a location object as input:
   - city: string
   - country: string (ISO 2-letter code)
2. Makes a GET request to the OpenWeatherMap API
3. Stores the weather data in a "weather" table
4. Returns the stored weather document ID and current conditions

Schema Requirements:
- Table: "weather"
  - city: string
  - country: string
  - timestamp: number
  - temperature: number (in Celsius)
  - humidity: number (percentage)
  - conditions: string (e.g., "Clear", "Rain")
  - windSpeed: number (in m/s)
  - lastUpdated: number

Example Usage:
```typescript
const result = await ctx.runAction("fetchWeather", {
  city: "London",
  country: "GB"
});
```

API Details:
- Base URL: https://api.openweathermap.org/data/2.5/weather
- Parameters:
  - q: `${city},${country}`
  - appid: API key (to be provided via environment variable)
  - units: metric
- Example Response:
```json
{
  "main": {
    "temp": 15.6,
    "humidity": 75
  },
  "weather": [
    {
      "main": "Rain",
      "description": "light rain"
    }
  ],
  "wind": {
    "speed": 4.2
  }
}
```

Test Cases:
1. Basic Fetch
   - Fetch weather for a valid city
   - Verify data is stored correctly
   - Check returned data matches API response

2. Error Handling
   - Invalid city names should be rejected
   - Invalid country codes should be rejected
   - API errors should be handled gracefully

3. Rate Limiting
   - Implement basic rate limiting
   - Cache results for 5 minutes
   - Return cached data if available

4. Data Validation
   - Verify temperature is in valid range
   - Verify humidity is 0-100%
   - Verify wind speed is non-negative

5. Edge Cases
   - Cities with spaces in names
   - Special characters in city names
   - Missing API key
   - Network timeouts