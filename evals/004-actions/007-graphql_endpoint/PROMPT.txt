Create an HTTP action that implements a minimal GraphQL-like query endpoint.

Required Action:
Create an HTTP action at `/graphql` that:
1. Accepts POST requests with JSON payloads containing:
   - query: string (simplified GraphQL-like syntax)
   - variables: optional object
2. Parses and executes queries for:
   - Single entity by ID
   - List of entities with filters
   - Nested relationships
   - Field selection
3. Returns JSON responses matching the query structure

Schema Requirements:
- Table: "authors"
  - name: string
  - email: string
  - bio: optional string
  - joinedAt: number

- Table: "books"
  - authorId: Id<"authors">
  - title: string
  - genre: string
  - publishedYear: number
  - rating: number
  - isPublished: boolean

- Table: "reviews"
  - bookId: Id<"books">
  - userId: string
  - rating: number
  - comment: string
  - createdAt: number

Example Query:
```graphql
{
  book(id: "books:abc123") {
    title
    genre
    author {
      name
      email
    }
    reviews {
      rating
      comment
    }
  }
}
```

Example Response:
```json
{
  "data": {
    "book": {
      "title": "The Great Novel",
      "genre": "Fiction",
      "author": {
        "name": "Jane Smith",
        "email": "jane@example.com"
      },
      "reviews": [
        {
          "rating": 4,
          "comment": "Great read!"
        }
      ]
    }
  }
}
```

Test Cases:
1. Basic Queries
   - Get single entity by ID
   - List entities with filters
   - Field selection
   - Nested relationships

2. Query Validation
   - Invalid syntax
   - Unknown fields
   - Missing required fields
   - Invalid relationships

3. Performance
   - Efficient field selection
   - Relationship batching
   - Query complexity limits
   - Response caching

4. Error Handling
   - Syntax errors
   - Runtime errors
   - Not found errors
   - Permission errors

5. Edge Cases
   - Empty results
   - Deep nesting
   - Large result sets
   - Invalid field types