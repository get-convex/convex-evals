Create an action-based task queue system for processing background jobs.

Required Action:
Create an HTTP action at `/tasks` that:
1. Implements task queue operations:
   - Task submission with priority
   - Task status checking
   - Task cancellation
   - Task result retrieval
2. Manages task execution:
   - Priority-based scheduling
   - Concurrent task limits
   - Task timeouts
   - Retry handling
3. Returns appropriate responses:
   - Task ID and status
   - Progress updates
   - Error handling
   - Result delivery

Schema Requirements:
- Table: "tasks"
  - id: string (unique identifier)
  - type: string (task type)
  - priority: number (0-9, higher is more important)
  - status: union("pending", "running", "completed", "failed", "cancelled")
  - data: any (task input data)
  - result: optional any (task output)
  - error: optional string
  - createdAt: number
  - startedAt: optional number
  - completedAt: optional number
  - attempts: number
  - nextRetry: optional number

- Table: "task_metrics"
  - timestamp: number
  - taskType: string
  - totalTasks: number
  - completedTasks: number
  - failedTasks: number
  - avgProcessingTime: number
  - maxConcurrent: number

Configuration:
```typescript
const TASK_CONFIG = {
  maxConcurrent: 5,     // Maximum concurrent tasks
  maxRetries: 3,        // Maximum retry attempts
  retryDelays: [        // Retry delay in seconds
    30,                 // First retry
    300,               // Second retry
    3600               // Third retry
  ],
  taskTypes: {
    "process_image": {
      timeout: 300,     // 5 minutes
      maxRetries: 2
    },
    "generate_report": {
      timeout: 1800,    // 30 minutes
      maxRetries: 1
    }
  }
};
```

Example Usage:
```typescript
// Submit task
const response = await fetch("/tasks", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    type: "process_image",
    priority: 5,
    data: {
      imageUrl: "https://example.com/image.jpg",
      options: { /* ... */ }
    }
  })
});

// Task submission response
{
  "taskId": "task_abc123",
  "status": "pending",
  "estimatedStart": 1678901234567
}

// Check task status
const status = await fetch("/tasks/task_abc123");

// Status response
{
  "taskId": "task_abc123",
  "status": "running",
  "progress": 45,
  "startedAt": 1678901234567,
  "estimatedCompletion": 1678901334567
}
```

Test Cases:
1. Task Lifecycle
   - Task submission
   - Status monitoring
   - Result retrieval
   - Task cancellation

2. Priority Handling
   - Multiple priority levels
   - Priority preemption
   - Queue reordering
   - Starvation prevention

3. Error Handling
   - Task timeouts
   - Retry logic
   - Failure reporting
   - Resource exhaustion

4. Concurrency
   - Parallel execution
   - Resource limits
   - Task isolation
   - Queue backpressure

5. Edge Cases
   - Queue overflow
   - Invalid task types
   - Duplicate submissions
   - System recovery