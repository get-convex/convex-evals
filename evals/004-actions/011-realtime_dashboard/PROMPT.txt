Create an HTTP action that serves real-time dashboard data with SSE (Server-Sent Events).

Required Action:
Create an HTTP action at `/dashboard` that:
1. Implements SSE streaming:
   - Event stream connection
   - Real-time metric updates
   - Heartbeat mechanism
   - Connection management
2. Manages dashboard data:
   - Aggregate metrics
   - Time-series data
   - System health status
   - Alert conditions
3. Returns appropriate responses:
   - SSE event format
   - JSON data payloads
   - Error notifications
   - Connection status

Schema Requirements:
- Table: "metrics"
  - timestamp: number
  - category: string
  - name: string
  - value: number
  - unit: string
  - tags: array of strings

- Table: "alerts"
  - timestamp: number
  - severity: union("info", "warning", "error", "critical")
  - message: string
  - source: string
  - acknowledged: boolean
  - resolvedAt: optional number

- Table: "system_status"
  - component: string
  - status: union("healthy", "degraded", "down")
  - lastCheck: number
  - message: string
  - metadata: any

Configuration:
```typescript
const DASHBOARD_CONFIG = {
  heartbeatInterval: 30,    // Seconds between heartbeats
  metricWindow: 3600,       // Seconds of history to keep
  alertThresholds: {
    cpu_usage: 90,          // Percentage
    memory_usage: 85,       // Percentage
    error_rate: 5,          // Errors per minute
    latency: 1000,          // Milliseconds
  },
  components: [
    "api_server",
    "database",
    "cache",
    "worker_pool"
  ]
};
```

Example Usage:
```typescript
// Connect to SSE stream
const eventSource = new EventSource("/dashboard");

// Handle different event types
eventSource.addEventListener("metric", (event) => {
  const metric = JSON.parse(event.data);
  updateChart(metric);
});

eventSource.addEventListener("alert", (event) => {
  const alert = JSON.parse(event.data);
  showNotification(alert);
});

// Example SSE events
event: metric
data: {
  "timestamp": 1678901234567,
  "category": "system",
  "name": "cpu_usage",
  "value": 75.5,
  "unit": "percent",
  "tags": ["production", "us-west"]
}

event: alert
data: {
  "timestamp": 1678901234567,
  "severity": "warning",
  "message": "High memory usage detected",
  "source": "worker_pool",
  "acknowledged": false
}
```

Test Cases:
1. SSE Connection
   - Connection establishment
   - Event streaming
   - Heartbeat monitoring
   - Connection recovery

2. Data Management
   - Metric aggregation
   - Time-series tracking
   - Alert generation
   - Status updates

3. Error Handling
   - Connection drops
   - Invalid data
   - System errors
   - Threshold breaches

4. Performance
   - Multiple clients
   - High event rates
   - Data buffering
   - Resource usage

5. Edge Cases
   - Stale connections
   - Data backpressure
   - Alert storms
   - System recovery