Create an action that orchestrates multiple mutations to handle batch operations in Convex.

Required Action:
Create an action named `batchCreate` that:
1. Takes an array of user objects as input, each containing:
   - name: string
   - email: string
   - role: "admin" | "user"
2. For each user:
   - Creates a user record in the "users" table
   - Creates a profile in the "profiles" table
   - Creates a settings record in the "settings" table
3. Returns a summary object with:
   - totalCreated: number of users created
   - userIds: array of created user IDs
   - errors: array of any errors encountered

Schema Requirements:
- Table: "users"
  - name: string
  - email: string
  - role: union("admin", "user")
  - createdAt: number

- Table: "profiles"
  - userId: Id<"users">
  - displayName: string (defaults to user's name)
  - avatarUrl: optional string
  - bio: optional string

- Table: "settings"
  - userId: Id<"users">
  - theme: union("light", "dark", "system")
  - notifications: boolean
  - language: string (defaults to "en")

Example Usage:
```typescript
const result = await ctx.runAction("batchCreate", {
  users: [
    { name: "Alice", email: "alice@example.com", role: "admin" },
    { name: "Bob", email: "bob@example.com", role: "user" }
  ]
});
```

Test Cases:
1. Basic Batch
   - Create multiple users with valid data
   - Verify all related records are created
   - Check returned summary matches created records

2. Validation
   - Invalid emails should be rejected
   - Duplicate emails should be rejected
   - Invalid roles should be rejected

3. Partial Success
   - If some users fail validation, others should still be created
   - Error summary should include details of failed creations

4. Edge Cases
   - Empty batch should return zero success
   - Maximum batch size should be enforced (e.g., 100)
   - Special characters in names/emails
   - Case sensitivity in emails

5. Error Cases
   - Missing required fields
   - Invalid data types
   - Network failures during creation