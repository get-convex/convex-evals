Create a backend that writes data and triggers an async HTTP request.

Create this schema in `convex/schema.ts`:
```ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  requests: defineTable({
    url: v.string(),
    status: v.union(v.literal("pending"), v.literal("completed")),
    requestedAt: v.number(),
    completedAt: v.optional(v.number()),
  }).index("by_url", ["url"]),
});
```

Implement these functions in `convex/index.ts`:

1. Create a mutation `initiateRequest` that:
   - Takes arguments:  `{ url: string }`
   - Checks if the URL already exists in the requests table
   - If it does, return the existing record ID
   - If it doesn't, inserts a pending record into requests table
   - Starts an asynchronous action to fetch the URL
   - Returns the ID of the new record

2. Create an internal action `performHttpbinFetch` that:
   - Takes arguments:  `{ url: string, requestId: Id<"requests"> }`
   - Makes a POST request to the URL
   - Updates the requests record with an exported mutation `updateRequest`
     - Define `updateRequest` to take arguments: `{ requestId: Id<"requests">, status: "completed", completedAt: number }`
     - It should set the status to "completed" and set `completedAt` to the provided timestamp
   - Returns nothing

Behavioral expectations:
- Multiple concurrent `initiateRequest` calls for the same URL must return the same existing request ID and not create duplicates.
- Requests that fail the POST should not transition to completed; the request should remain `pending` and `completedAt` should be unset.

The implementation should demonstrate:
- Proper scheduling of async work using actions
- Proper state management in the database
- Using mutations and actions together

Create only the `convex/schema.ts`, `convex/index.ts`, and `package.json` files. Do not generate any other files.

Do not export any functions from `convex/index.ts` other than `initiateRequest`, `updateRequest`, and `performHttpbinFetch`.