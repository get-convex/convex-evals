Create a backend that demonstrates sharing a pure TypeScript helper function between query and mutation functions.

Create this structure in the `convex` directory:

1. Create a schema in `convex/schema.ts`:
```ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  items: defineTable({
    name: v.string(),
    quantity: v.number(),
    lastModified: v.number(),
  }),
});
```

2. Create a helper function `getItemData` in `convex/index.ts` that takes an item ID and fetches it from the database, returning a document like:

```ts
{
  name: item.name,
  quantity: item.quantity,
  lastModified: new Date(item.lastModified).toISOString(),
}
```
Return null if item not found, otherwise returns the formatted data

3. Create more functions in `convex/index.ts`:

a. Create a query `getItem` that:
   - Takes an item ID argument with the name "itemId"
   - Uses the shared helper function to retrieve and transform the item from the database
   - Throws an error if item not found

b. Create a mutation `updateItem` that:
   - Takes an item ID argument with the name "itemId" and a new quantity argument with the name "quantity"
   - Updates the item's quantity and lastModified timestamp
   - Retrieves the item via the shared helper function
   - Throws an error if item not found
   - Returns the updated item

Both functions should use the same `getItemData` helper function. Do not create any more functions than the specified ones.

The goal is to demonstrate how pure TypeScript helper functions can be shared between different Convex functions while maintaining type safety and consistent data formatting.