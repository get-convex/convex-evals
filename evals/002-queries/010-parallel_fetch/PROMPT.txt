Given this schema:

```typescript
export default defineSchema({
  // Users and their preferences
  users: defineTable({
    name: v.string(),
    email: v.string(),
  }).index("by_email", ["email"]),
  userPreferences: defineTable({
    userId: v.id("users"),
    theme: v.string(),
    notifications: v.boolean(),
  }).index("by_user", ["userId"]),

  // Posts and their reactions
  posts: defineTable({
    authorId: v.id("users"),
    title: v.string(),
    content: v.string(),
  }).index("by_author", ["authorId"]),  
  reactions: defineTable({
    postId: v.id("posts"),
    userId: v.id("users"),
    type: v.union(v.literal("like"), v.literal("heart"), v.literal("celebrate")),
  }).index("by_post", ["postId"]),
});
```

Write a query named `getAuthorDashboard` that:
- Takes a user's email as an argument
- Returns an object containing:
  * user: the user's name, email, theme, and notifications
  * posts: array of user's 15 most recent posts, each with
    - the post title
    - reactionCounts: count of each reaction type
- Demonstrates efficient parallel fetching:
  * Fetch preferences and posts in parallel
  * Kicks off reactions fetches as posts are streamed in
  * Queries reactions in parallel