Create a backend that demonstrates reading data and asynchronous logging.

Required files:

`convex/schema.ts`:
```ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  documents: defineTable({
    title: v.string(),
    content: v.string(),
  }),

  accessLogs: defineTable({
    documentId: v.id("documents"),
    action: v.string(),
  }),
});
```

Create an internal function that logs access to a document by writing to the `accessLogs` table.
Create a mutation named `getDocument` in `convex/index.ts` that:
- Takes arguments:  `{ documentId: Id<"documents"> }`
- Throws an error with the message "Document not found" if there is no document with that ID
- Logs access asynchronously by writing a record to `accessLogs` with `{ documentId, action: "read" }`
- Returns the full document including its system fields

Files to create:
- `convex/schema.ts` with the schema above
- `convex/index.ts` with both functions
- `package.json` with necessary dependencies